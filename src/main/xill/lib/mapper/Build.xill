/**
 * Project: Mapper
 * Author: Titus Nachbauer, Ernst van Rheenen, Sander Visser
 * Date: 2016-06-23
 *
 * Build.xill generates a Mapper.xill in <rootFolder>/config/ 
 * which will include all mapping scripts it can find in all subfolders named 'mappings' 
 * and runs the appropriate script based on the provided ContentType.
 */

use System, Stream, File, String, Assert, Collection;

include lib.util.AllUtil;


//-------------------------------------------------------------------------
//						  SETUP
//-------------------------------------------------------------------------

var templatePath = "lib/mapper/template/_MapperTemplate.xill";
var mappings = getMappings();
var checksum = generateChecksumFromList(mappings);

//-------------------------------------------------------------------------
//						  MAIN
//-------------------------------------------------------------------------

generateMapper();
return checksum;

//-------------------------------------------------------------------------
//						  FUNCTIONS
//-------------------------------------------------------------------------

/**
* Returns any mapping robots it can find starting from the rootfolder.
* It is assumed that folders named 'mappings' only contain mapping robots.
*/
private function getMappings() {
    do {
	    var files = [];
	    foreach(folder in File.iterateFolders(System.info().projectPath,true)){
	        if(String.endsWith(folder.path,"mappings")){
		        files += collect(filter<isXillFile>(File.iterateFiles(folder.path, false)));
		    }
		}
		if(Collection.length(files) == 1){
		    Assert.error("No mapping robots found in project.");
		}
        return files;
    } fail (error) {
        System.print(
            "Error getting mapping robots \n" ::
            "Message: " :: error.message :: "\n" ::
            "In robot: " :: error.robot :: "\n" :: 
            "At line: " :: error.line);
    }
}

/**
* Generate a main mapping robot based on the provided mappings and save it
* at the rootFolder/config/
*/
private function generateMapper() {
        var template = getMappingBotTemplate(templatePath);
        var includeStatements = "";
        var ifStatements = "";
        var typeStatements = "";
        foreach (mapping in mappings) {
            includeStatements = addIncludeStatement(includeStatements, mapping);
            ifStatements = addIfStatement(ifStatements, mapping);
            typeStatements = addTypeStatement(typeStatements, mapping);
        }
        
        var replacements = {
        	"__INCLUDE_MAPPING__" : includeStatements, 
        	"__IF_MAPPING__" : ifStatements, 
        	"__TYPE_MAPPING__" : typeStatements, 
        	"__MAPPING_CHECKSUM__" : getChecksumStatement(checksum)	
        };
        saveMapper(template, replacements);
    
}

/**
* Returns the text of the mapping bot template file
*/
private function getMappingBotTemplate(templatePath) {
    do {
        var file = File.openRead(templatePath);
        return Stream.getText(file);
    } fail (error) {
        System.print ("Error opening or reading mapping bot template: " :: error, "error");
    }
}

/**
* Adds an include-statement for current mapping to the input string.
*/
private function addIncludeStatement(includeStatements, mapping) {
    var newInclude = "include " :: getMappingFQName(mapping) :: " as " :: getQualifiedName(mapping) ::";\n";
    
    return includeStatements :: newInclude;
}

/**
* Adds an if-statement (switch) for mapping to the input string.
*/
private function addIfStatement(ifStatements, mapping) {
    var newIf = "";
    if (ifStatements == "") {
        newIf = "	if ";
    } else {
        newIf = "	else if ";
    }
    newIf = newIf :: "(contentType == \"" :: getMappingName (mapping) :: "\") {" :: 
        getMapBlock(getMappingName(mapping)) :: "
    }";
    return ifStatements :: newIf;
}

private function getMapBlock(contentType) {
    var block = "
        var parentContentType = __CONTENTTYPE__->getParentTemplate();
        if(parentContentType != null && parentContentType != \"\") {
            foreach(type in parentContentType) {
                var parent = mapObject(object, type);
                result += __CONTENTTYPE__->mapObject(parent, object);
            }
        } else {
            result = __CONTENTTYPE__->mapObject({}, object);
        }";
    return String.replace(block, "__CONTENTTYPE__", contentType, false);
}

private function addTypeStatement(typeStatements, mapping) {
	return typeStatements :: getTypeMappingBlock(mapping);
}

private function getTypeMappingBlock(contentType) {
	contentType = getMappingName(contentType);
    var block = "
    	targetType = matchTargetType(__CONTENTTYPE__->getSourceType(context), type, \"__CONTENTTYPE__\");
		if (targetType != null) { return targetType; }
		";
    return String.replace(block, "__CONTENTTYPE__", contentType, false);	
}

private function getChecksumStatement (checksum) {
    return "// Checksum: " :: checksum;
}

/**
* Save the previously generated include- and if-statements to the central mapping bot 
*/
private function saveMapper(template, replacements) {
	foreach(label, replacement in replacements) {
		template = String.replace(template, label, replacement, false);
	}
    saveFile("config/Mapper.xill", template);
}

/**
* Returns the checksum stored in the currently generated mapping bot or null if there is no mapping bot yet.
*/
private function getMappingChecksum(mapperPath) {
    var result = null;
    if (File.exists(mapperPath)) {
        var text = Stream.getText(File.openRead(mapperPath));
        result = String.replace(text, ".*// Checksum: ([0-9,a-f]{32}).*", "$1");
    }
    return result;
}

/**
* Returns the name of the mapping, assuming it is a path to a .xill mapping robot,
* which has the mapped contentType as file name using the correct casing.
*/
function getMappingName(mapping) {
    return toUpperCamelCase(String.replace(mapping, ".*[/\\\\]([^/\\\\]*?)\\.xill", "$1"));
}

/**
* Returns a call to a standardized mapping function with the ContentType of the current mapping
*/
function getMappingFunction(mapping) {
    return "map" :: getMappingName(mapping) :: "(object)";
}

/**
* Returns the fully qualified path used to include mapping. 
*/
function getMappingFQName(mapping) {
    var searchString = normalizeSlashes(System.info().projectPath) :: "/(.*)\\.xill";
    var relativePath = (String.replace(normalizeSlashes(mapping), searchString, "$1"));
    return (String.replace (relativePath, "[/\\\\]", "."));
}

/**
* Returns the name for the include of a mapper
*/
function getQualifiedName(mapping){
    return String.split(String.substring(mapping,0,String.length(mapping)-5),"\\\\",false)[Collection.length(String.split(mapping,"\\\\",false))-1];
}